Real time implementation tips:

-> always browse "https://console.cloud.google.com" instead of searching GCP console
-> "https://status.cloud.google.com" - for resource status in gcp project
-> if you get access to a custom gcp project go and check the gcp projet in All tabs instead of recent tab of project
-> when presenting a demo to a customer make sure you change the PROJECT NAME to CUSTOMER-A to have a personal experience
-> Always place the files in Home directory path (5Gb presistent vol) in your Cloud shell.
-> """ gcloud beta interactive """ use this  command in cloud shell it open an interactive mode where it auto suggests the code
-> """PS1=$""" When you use this command on linux machine you can type a long command so that it won't go for next line
-> make sure to Install Google cloudSDk in your office lap and the type "gcloud init" to initalize your account 

Examination tips:
-> region ends with numeric
-> zone ends with alaphabet
-> One Env in on-perm == one project (project-dev)(prooject-prod)


Project Creation:

-> Project name - for identifing (human readable) it can be changed n times after creation also
-> project-id  - name-sufix(number) - by deafult google make it unique globally
-> Location - No organization for free trail

Project deletion:

-> goto project setting -> click on "shutdown" (A soft deleteionof project for 30 days within this time u can restart u project)
-> If you goto Manged resources u can fine the history of project and project need to be deleted in 30days

=======================
Access GCP Resources:
=======================

1. Google-CLoud-Storage: consider it as a Utility in House.

2. Compute Enginbe - API 
   -> when you enabled API you get the service account of the vm with project number prefix to its email.
      so always keep your project id private (not to expose)
   -> VM must be a part of a Data Center i.e, Zone
   -> There isno need of creation of keys as like in AWS for VM login
   -> Always stop tor delete the resource if no longer used

=============================
Accesss GCP Resource Via CLI:
=============================


** CLI via Cloud shell *** 

- CLoud shell is not attached to a project, it is attached to your account (email.id)
- 5Gb of presistent disk is given free for cloud shell and 4vpcu and 16 GB RAM is given to it
- All Required software is Pre-installed in the cloud shell 
- If you are not comfortable with CLI you can enable ""EDITOR"" for UI in cloud shell, 
- i.e, if the user need to read a file in linux (CLI) terminal with vi, nano, they can use the command "edit" to view the content in UI
  eg: edit readme.tx -> it opens cloud shell EDITOR which is like notepad - GUI mode to see the files to do CRUD operation. 
- Click on """ Open terminal""" - to get back to CLI
- google cloud SDK is pre installed in shell - which is necessary to perform ""gcloud"" commands to acces GCP resources


NOTE: *** The files placed in the Homw directory will be avaiable after the restart also but the file in other directory will not be stored ***
so that is here only the 5GB presistent volume will be attached to another VM-Cloud shell when it is restarted or reconnected

gcloud auth list          - it show the shell is attached to your email id nit to specific project

cat /etc/os-release       - to know the OS of the cloud shell
lscpu                     - to know cpu details od the cloud shell
free -m                   - to know the memory details of the cloud shell
sudo !!                   - to run the last command if it failed due to permission
sudo cp ~/readme.tx .     - here [~] represents the home directory path so u can specify with this from any another directory 
cd ~                      - to go to home directory from any pwd
echo $DEVSHELL_PROJECT_ID -  to get project id from env variables in cloud shell

1. GCS bucket resources access via CLI:

-> gsutil mb gs://$BUCKET-NAME             - create the bucket
-> gsutil ls                               - to list the buckets
-> gsutil cp source.txt gs://BUCKET-NAME/  - to copy the file to bucket
-> gsutil ls  gs://BUCKET-NAME/            - lists the item inside the bucket


2. Compute Engine resouce access via CLI


-> gcloud compute instnaces create $INSTANCE-NAME                 - to create vm then it will ask for zone
-> gcloud compute instances create  $VM_NAME --zone us-central-1a - to creta vm with specified zone
-> gcloud compute instnaces list                                  - to list the VMs

*** within 30sec the VM is created in GCP as compoared other cloud provider ***

NOTE = "Instances" in above command have ability to create multiple VM at a time

-> gcloud compute instances create  vm2 vm3 vm4 --zone us-central-1a  - to create multiple VMS
-> gcloud config set compute/zone us-central-1a                       - to set zone of the compute instnaces by default
-> gcloud compute instances delete  vm2 vm3 vm4                       - so by using above cmd and this one u can delete the multiple vm without adding zone in cmd
-> gcloud compute instances delete  vm2 vm3 vm4 -q                    - this command [-q] does quietly delete

*** CLI via Cloud SDK ***

-> When the cloud shell and console have been a server down issus you can use SDK in your local laptop to access the resources

once you installed the SDK in local

-> gcloud init                                                                    - initialize the SDK for authentication of your GCP account and set your project and zone etc
-> gcloud config list                                                             - to list the acount,project etc.,  configuration avaiable in SDK
-> gcloud projects list                                                           - to list the projects
-> gcloud config set project PROJECT_ID                                           - to set or change the project
-> gcloud compute instances create vm1 --project PROJECT_ID --zone us-central-1a  - to create VM in specifec Project via SDK
-> gcloud compute instances stop vm1 --project PROJECT_ID --zone us-central-1a    - to Stop VM in specifec Project via SDK
-> gcloud  compute instances list --project PROJECT_ID                            - to list VM in specifec Project via SDK
